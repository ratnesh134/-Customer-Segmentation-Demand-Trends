# -*- coding: utf-8 -*-
"""Python_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hiF1dDz_6-yOqO6EKL7mI7DYfiQKL3gR

## Importing the Libraries
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

customer_df = pd.read_csv('customers.csv')

sales_df = pd.read_csv('sales_data.csv')

customer_df.head()

sales_df.head()

customer_df.info()

customer_df.shape

customer_df.isnull().sum()

"""There are no null values in the dataframe."""

sales_df.shape

sales_df.isnull().sum()

"""This dataframe also doesn't contain any null values.

## Exploratory Data Analysis
"""

sales_df.sample(10)

"""Here in this data frame, there are irregularities with the product name and the categories they fall into. So,we will map each product with their respective categories."""

sales_df['product_name'].nunique()

sales_df['product_name'].unique()

sales_df['category'].unique()

# Mapping function
def map_category(product):
    category_mapping = {
        'Chicken': 'Meat',
        'Eggs': 'Dairy',
        'Vegetables': 'Produce',
        'Fruits': 'Produce',
        'Rice': 'Grains',
        'Milk': 'Dairy',
        'Bread': 'Bakery'
    }
    return category_mapping.get(product)

# Apply the function to create the 'category' column
sales_df['category'] = sales_df['product_name'].apply(map_category)

sales_df.head()

"""Now the product name falls into right category."""

sales_df.info()

# converting the order_date column into datetime format

sales_df['order_date'] = pd.to_datetime(sales_df['order_date'], format='%Y-%m-%d')

sales_df.info()

customer_df.info()

# We will convert the last_order_date column into datetime format as well

customer_df['last_order_date'] = pd.to_datetime(customer_df['last_order_date'], format='%Y-%m-%d')

customer_df.head()

customer_df.info()

print("\n### Statistical Summary ###")
print(sales_df.describe())
print(customer_df.describe())

# Distribution of revenue in orders
plt.figure(figsize=(12, 6))
sns.histplot(sales_df['revenue'], bins=10, kde=True)
plt.title('Distribution of Revenue')
plt.xlabel('Revenue')
plt.ylabel('Frequency')
plt.grid()
plt.show()

# Revenue by category
plt.figure(figsize=(12, 6))
sns.boxplot(data=sales_df, x='category', y='revenue')
plt.title('Revenue Distribution by Product Category')
plt.xlabel('Category')
plt.ylabel('Revenue')
plt.xticks(rotation=45)
plt.grid()
plt.show()

# Orders by region
plt.figure(figsize=(10, 5))
sns.countplot(data=sales_df, x='region', order=sales_df['region'].value_counts().index)
plt.title('Number of Orders by Region')
plt.xlabel('Region')
plt.ylabel('Number of Orders')
plt.grid()
plt.show()

# Plot of the each products by revenue
top_products = sales_df.groupby('product_name')['revenue'].sum().sort_values(ascending=False).head(10)
plt.figure(figsize=(10, 6))
sns.barplot(x=top_products.index, y=top_products.values)
plt.title(' Products by Revenue')
plt.xlabel('Product Name')
plt.ylabel('Revenue')
plt.xticks()
plt.show()

# Plot the distribution of total spend
plt.figure(figsize=(10, 6))
sns.histplot(customer_df['total_spend'], bins=50, kde=True)
plt.title('Distribution of Total Spend')
plt.xlabel('Total Spend')
plt.ylabel('Frequency')
plt.show()

# Plot the distribution of number of orders
plt.figure(figsize=(10, 6))
sns.histplot(customer_df['num_orders'], bins=50, kde=True)
plt.title('Distribution of Number of Orders')
plt.xlabel('Number of Orders')
plt.ylabel('Frequency')
plt.show()

# Plot the top 10 customers by total spend
top_customers = customer_df.sort_values(by='total_spend', ascending=False).head(10)
plt.figure(figsize=(10, 6))
sns.barplot(x=top_customers['customer_id'], y=top_customers['total_spend'])
plt.title('Top 10 Customers by Total Spend')
plt.xlabel('Customer ID')
plt.ylabel('Total Spend')
plt.xticks(rotation=90)
plt.show()

"""## Model Training"""

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

"""Our Key columns in Customer dataframe are "total_spend" and "num_orders". We will segment our customers based on those two features."""

scaler = StandardScaler()
scaled_features = scaler.fit_transform(customer_df[['total_spend', 'num_orders']])

kmeans = KMeans(n_clusters=3, random_state=0).fit(scaled_features)
customer_df['cluster'] = kmeans.labels_

# Label clusters based on characteristics (this would need further analysis)
cluster_names = {0: 'High-Value', 1: 'Frequent', 2: 'Occasional'}
customer_df['customer_segment'] = customer_df['cluster'].map(cluster_names)

customer_df.head()

"""## Analyze Sales Trends to Identify Peak Ordering Periods

Time Series Analysis:

1) Use the order_date from sales_data.csv to group data by month  to find trends.
2)Calculate total revenue or number of orders per period.

Peak Period Detection:

-->Look for months or weeks with higher than average sales to identify peak times.

### Step 1.
  Preparing the data to visualize
"""

# Monthly analysis
monthly_sales = sales_df.groupby(sales_df['order_date'].dt.to_period("M")).agg({
    'revenue': ['sum', 'count'],
    'order_id': 'nunique'
})

# Reset index to make 'order_date' a column again
monthly_sales.columns = ['total_revenue', 'total_orders', 'unique_orders']
monthly_sales = monthly_sales.reset_index()
monthly_sales['order_date'] = monthly_sales['order_date'].dt.to_timestamp()

# Weekly analysis (if needed for finer granularity)
weekly_sales = sales_df.set_index('order_date').resample('W').agg({
    'revenue': ['sum', 'count'],
    'order_id': 'nunique'
})
weekly_sales.columns = ['total_revenue', 'total_orders', 'unique_orders']

"""### Step 2
Identify Peak Periods

Calculate the mean and standard deviation for both revenue and order counts.

Identify periods where these metrics exceed one standard deviation above the mean as potential peaks.
"""

# Monthly
monthly_mean_revenue = monthly_sales['total_revenue'].mean()
monthly_std_revenue = monthly_sales['total_revenue'].std()
monthly_mean_orders = monthly_sales['total_orders'].mean()
monthly_std_orders = monthly_sales['total_orders'].std()

# Peak months based on revenue
monthly_sales['is_peak_revenue'] = monthly_sales['total_revenue'] > (monthly_mean_revenue + monthly_std_revenue)

# Peak months based on number of orders
monthly_sales['is_peak_orders'] = monthly_sales['total_orders'] > (monthly_mean_orders + monthly_std_orders)

# Weekly
weekly_mean_revenue = weekly_sales['total_revenue'].mean()
weekly_std_revenue = weekly_sales['total_revenue'].std()
weekly_mean_orders = weekly_sales['total_orders'].mean()
weekly_std_orders = weekly_sales['total_orders'].std()

# Peak weeks based on revenue
weekly_sales['is_peak_revenue'] = weekly_sales['total_revenue'] > (weekly_mean_revenue + weekly_std_revenue)

# Peak weeks based on number of orders
weekly_sales['is_peak_orders'] = weekly_sales['total_orders'] > (weekly_mean_orders + weekly_std_orders)

"""### Step 3:
 Visualize Trends and Peaks

Plot total revenue and number of orders over time to visualize trends.
Highlight peak periods on the graph.
"""

import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter

def format_num(x, pos):
    'The two args are the value and tick position'
    return f'${x:,.0f}'

# Monthly visualization
plt.figure(figsize=(18, 8))

# Revenue subplot
plt.subplot(1, 2, 1)
plt.fill_between(monthly_sales['order_date'], monthly_sales['total_revenue'], alpha=0.3)
plt.plot(monthly_sales['order_date'], monthly_sales['total_revenue'], marker='o', color='#1f77b4', linewidth=2, label='Revenue')
plt.title('Monthly Revenue', fontsize=16)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Total Revenue', fontsize=12)
plt.gca().yaxis.set_major_formatter(FuncFormatter(format_num))
plt.grid(True, linestyle='--', alpha=0.7)

# Highlight revenue peaks
for index, row in monthly_sales.iterrows():
    if row['is_peak_revenue']:
        plt.axvline(x=row['order_date'], color='#d62728', linestyle='--', alpha=0.5)
        plt.annotate(f'Peak', (row['order_date'], row['total_revenue']),
                     xytext=(0, 5), textcoords='offset points',
                     ha='center', va='bottom',
                     fontsize=10, color='#d62728')

# Orders subplot
plt.subplot(1, 2, 2)
plt.fill_between(monthly_sales['order_date'], monthly_sales['total_orders'], alpha=0.3)
plt.plot(monthly_sales['order_date'], monthly_sales['total_orders'], marker='o', color='#ff7f0e', linewidth=2, label='Orders')
plt.title('Monthly Order Count', fontsize=16)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Total Orders', fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)

# Highlight order peaks
for index, row in monthly_sales.iterrows():
    if row['is_peak_orders']:
        plt.axvline(x=row['order_date'], color='#2ca02c', linestyle='--', alpha=0.5)
        plt.annotate(f'Peak', (row['order_date'], row['total_orders']),
                     xytext=(0, 5), textcoords='offset points',
                     ha='center', va='bottom',
                     fontsize=10, color='#2ca02c')

plt.tight_layout()
plt.show()

monthly_sales.head(12)

# Bar plot

plt.figure(figsize=(12, 6))
monthly_sales.plot(kind='bar')
plt.title('Monthly Sales Revenue')
plt.xlabel('Month')
plt.ylabel('Revenue')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## Visualize Customer Segments and Order Patterns

Customer Segments Visualization:

Use scatter plots or bar plots to show how customers distribute across segments based on spend and order frequency.
"""

# Scatter plot for clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(data=customer_df, x='total_spend', y='num_orders', hue='customer_segment', palette='viridis')
plt.title('Customer Segmentation')
plt.xlabel('Total Spend')
plt.ylabel('Number of Orders')
plt.show()

"""The scatter plot in the screenshot represents Customer Segmentation based on Total Spend (x-axis) and Number of Orders (y-axis). Here are some key insights:

Customer Segments:

The legend categorizes customers into three segments: Frequent (dark blue), High-Value (teal), and Occasional (green).
Patterns in Segmentation:

Occasional Customers (Green): These customers place fewer orders (spread towards the lower y-axis) but have a wide range of total spend values.
Frequent Customers (Dark Blue): These customers place many orders but seem to have relatively lower spending per order.
High-Value Customers (Teal): These customers make frequent orders and have high total spend values.
Business Implications:

The Frequent segment could be targeted for loyalty programs to increase their spending.
The High-Value segment represents premium customers, and personalized offers or exclusive perks may help retain them.
The Occasional segment might need incentives or promotional campaigns to increase their order frequency.
"""

monthly_sales.head()

average_sales = monthly_sales['total_revenue'].mean()

plt.figure(figsize=(12, 6))
monthly_sales['total_revenue'].plot(kind='line', title='Monthly Revenue')
plt.axhline(y=average_sales, color='red', linestyle='--', label=f'Average Sales: {average_sales:.2f}')
plt.xlabel('Month')
plt.ylabel('Total Revenue')
plt.legend()
plt.show()

"""The line chart represents Monthly Revenue trends over time, with the total revenue (blue line) plotted against months and a red dashed line showing the average revenue (105,238.37). Here are some insights:

### Revenue Fluctuations:

The total revenue shows significant ups and downs over the months.
There are high peaks and sharp declines, suggesting periods of strong sales followed by dips.

Comparison to Average Revenue:
The red dashed line (105,238.37) represents the average revenue.
Some months perform above average (high peaks), while others drop below average, indicating inconsistency in revenue.


### Potential Causes for Variations:

High months might be due to seasonal promotions, successful marketing campaigns, or high-demand periods.
Low months might indicate slow business periods, reduced customer spending, or supply chain issues.

### Suggestions for Business Strategy:
Identify Peak Months: Understand why revenue was high in certain months and replicate those strategies.

Address Low Revenue Months: Investigate causes for dips (seasonality, demand shifts) and apply strategies like discounts or promotions to boost sales.

Stabilize Revenue: Aim to maintain consistent revenue levels by forecasting demand and optimizing marketing efforts.
"""

